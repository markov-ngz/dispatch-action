name: 'dispatch-workflow'
description: 'Trigger a workflow dispatch action and wait for the status check to succeed'
inputs:
  token: 
    description: 'Github Personal Access token'
    required: true
    type: string
  workflow_file: 
    description: 'Name of the dispatchable workflow file'
    required: true
    type: string
  repository:
    description: 'Workflow s repository'
    required: true
    type: string
  variables:
    description: 'Variable to add to run the workflow dispatch event'
    required: false
    type: string
  reference:
    description: 'Branch where the desired workflow file is wanted'
    required: false
    type: string
    default: 'main'
    
runs:
  using: "composite"
  steps:
      - name: Trigger Workflow
        run: |
          export IN=$VARIABLES
          export GH_COMMAND="gh workflow run $WORKFLOW_FILE --ref $REF --repo $REPO"
          while IFS=',' read -ra IN; do
          for i in "${IN[@]}";do
              GH_COMMAND+=" -f $i"
            done
          done <<< "$IN"
          $GH_COMMAND
        shell: bash
        env: 
          VARIABLES: ${{ inputs.variables }}
          GH_TOKEN: ${{inputs.token}}
          WORKFLOW_FILE: ${{ inputs.workflow_file }}
          REF: ${{ intputs.reference }}
          REPO: ${{ inputs.repository }}
          
      - name: Get run ID
        id: run_id
        run: |
          export RUN_ID=$(echo $(gh run list --workflow $WORKFLOW_FILE --repo $REPO --json databaseId --limit 1) | jq '.[0].databaseId')
          echo "ID=$RUN_ID" >> $GITHUB_OUTPUT
        shell: bash
        env:
          WORKFLOW_FILE: ${{ inputs.workflow_file }}
          REPO: ${{ inputs.repository }}
          
      - name: Check run status
        id: status
        run: gh run watch $RUN_ID -i 10 --exit-status --repo $REPO
        shell: bash
        env:
          REPO: ${{ inputs.repository }}
          RUN_ID: ${{ steps.run_id.outputs.ID }}
